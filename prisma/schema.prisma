// Prisma schema for Fire Suite Exchange

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  GUEST
  SELLER
  APPROVER
  ADMIN
}

enum SuiteArea {
  L    // Lower Fire Suite (1-90)
  UNT  // Upper North Terrace (1-20)
  UST  // Upper South Terrace (1-20)
}

enum ApplicationStatus {
  PENDING
  APPROVED
  DENIED
}

enum ListingStatus {
  DRAFT
  ACTIVE
  PENDING_MODERATION
  SOLD
  WITHDRAWN
  EXPIRED
}

enum DeliveryMethod {
  MOBILE_TRANSFER
  PAPER
  PDF
  WILL_CALL
  OTHER
}

// Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  role          UserRole  @default(GUEST)
  name          String?
  phone         String?
  twoFaSecret   String?   @map("twofa_secret")
  emailVerified DateTime? @map("email_verified")
  isLocked      Boolean   @default(false) @map("is_locked")
  showInDirectory Boolean @default(false) @map("show_in_directory")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  sellerApplications SellerApplication[]
  listings           Listing[]
  messagesSent       Message[]           @relation("MessageFrom")
  messagesReceived   Message[]           @relation("MessageTo")
  auditEvents        AuditEvent[]
  notificationPref   NotificationPref?
  discussions        Discussion[]
  discussionReplies  DiscussionReply[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Suite {
  id          String    @id @default(cuid())
  area        SuiteArea
  number      Int
  displayName String    @map("display_name") // e.g., "L23", "UNT5", "UST12"
  capacity    Int       @default(8)
  isActive    Boolean   @default(true) @map("is_active")

  // Relations
  applications SellerApplication[]
  listings     Listing[]

  @@unique([area, number])
  @@index([area])
  @@index([displayName])
  @@map("suites")
}

model SellerApplication {
  id            String            @id @default(cuid())
  userId        String            @map("user_id")
  suiteId       String            @map("suite_id")
  status        ApplicationStatus @default(PENDING)
  legalName     String            @map("legal_name")
  message       String?
  adminNote     String?           @map("admin_note")
  attachments   Json?             @default("[]") // Array of file URLs (proof of ownership)
  inviteCode    String?           @map("invite_code")
  verifiedAt    DateTime?         @map("verified_at") // When admin approved
  deniedReason  String?           @map("denied_reason")
  createdAt     DateTime          @default(now()) @map("created_at")
  decidedAt     DateTime?         @map("decided_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  suite Suite @relation(fields: [suiteId], references: [id])

  @@unique([userId, suiteId]) // User can only apply once per suite
  @@index([userId])
  @@index([suiteId])
  @@index([status])
  @@map("seller_applications")
}

model Listing {
  id                 String         @id @default(cuid())
  sellerId           String         @map("seller_id")
  suiteId            String         @map("suite_id")
  eventTitle         String         @map("event_title")
  eventDatetime      DateTime       @map("event_datetime")
  quantity           Int
  pricePerSeat       Decimal        @map("price_per_seat") @db.Decimal(10, 2)
  deliveryMethod     DeliveryMethod @map("delivery_method")
  contactEmail       String?        @map("contact_email")
  contactPhone       String?        @map("contact_phone")
  contactLink        String?        @map("contact_link")
  contactMessenger   String?        @map("contact_messenger") // Facebook Messenger username
  allowMessages      Boolean        @default(false) @map("allow_messages")
  notes              String?
  status             ListingStatus  @default(ACTIVE)
  seatNumbers        String?        @map("seat_numbers") // e.g., "1,2,3,4"
  slug               String         @unique
  isFeatured         Boolean        @default(false) @map("is_featured")
  viewCount          Int            @default(0) @map("view_count")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  soldAt             DateTime?      @map("sold_at")
  soldPriceTotal     Decimal?       @map("sold_price_total") @db.Decimal(10, 2)
  soldBuyerName      String?        @map("sold_buyer_name")
  soldBuyerEmail     String?        @map("sold_buyer_email")

  // Relations
  seller User            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  suite  Suite           @relation(fields: [suiteId], references: [id])
  images ListingImage[]
  messages Message[]

  @@index([sellerId])
  @@index([suiteId])
  @@index([status])
  @@index([eventDatetime])
  @@index([slug])
  @@map("listings")
}

model ListingImage {
  id        String   @id @default(cuid())
  listingId String   @map("listing_id")
  url       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@map("listing_images")
}

model Message {
  id         String   @id @default(cuid())
  listingId  String   @map("listing_id")
  fromUserId String   @map("from_user_id")
  toUserId   String   @map("to_user_id")
  body       String
  isRead     Boolean  @default(false) @map("is_read")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  listing  Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  fromUser User    @relation("MessageFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User    @relation("MessageTo", fields: [toUserId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([fromUserId])
  @@index([toUserId])
  @@map("messages")
}

model AuditEvent {
  id         String   @id @default(cuid())
  actorId    String?  @map("actor_id")
  action     String
  targetType String   @map("target_type")
  targetId   String   @map("target_id")
  metadata   Json?    @default("{}")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  actor User? @relation(fields: [actorId], references: [id], onDelete: SetNull)

  @@index([actorId])
  @@index([action])
  @@index([targetType])
  @@index([createdAt])
  @@map("audit_events")
}

model NotificationPref {
  id          String  @id @default(cuid())
  userId      String  @unique @map("user_id")
  emailEnabled Boolean @default(true) @map("email_enabled")
  smsEnabled  Boolean @default(false) @map("sms_enabled")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_prefs")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email])
  @@index([token])
  @@map("password_reset_tokens")
}

model Discussion {
  id             String   @id @default(cuid())
  authorId       String   @map("author_id")
  title          String
  content        String   @db.Text
  category       String?  @default("General")
  isPinned       Boolean  @default(false) @map("is_pinned")
  isLocked       Boolean  @default(false) @map("is_locked")
  viewCount      Int      @default(0) @map("view_count")
  replyCount     Int      @default(0) @map("reply_count")
  lastActivityAt DateTime @default(now()) @map("last_activity_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  author  User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  replies DiscussionReply[]

  @@index([authorId])
  @@index([category])
  @@index([isPinned])
  @@index([lastActivityAt])
  @@index([createdAt])
  @@map("discussions")
}

model DiscussionReply {
  id           String   @id @default(cuid())
  discussionId String   @map("discussion_id")
  authorId     String   @map("author_id")
  content      String   @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([discussionId])
  @@index([authorId])
  @@index([createdAt])
  @@map("discussion_replies")
}

model BugReport {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  steps       String?  @db.Text
  userEmail   String   @map("user_email")
  userId      String?  @map("user_id")
  url         String?
  userAgent   String?  @map("user_agent")
  status      String   @default("NEW") // NEW, IN_PROGRESS, RESOLVED, CLOSED
  isResolved  Boolean  @default(false) @map("is_resolved")
  resolvedAt  DateTime? @map("resolved_at")
  adminNotes  String?  @map("admin_notes") @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([userEmail])
  @@index([status])
  @@index([createdAt])
  @@map("bug_reports")
}
